2438. Range Product Queries of Powers
Solution:
class Solution:
    def productQueries(self, n: int, queries: List[List[int]]) -> List[int]:
        MOD = 10**9 + 7
        
        # Step 1: Get powers of 2 from binary representation
        powers = []
        bit = 0
        while n > 0:
            if n & 1:
                powers.append(1 << bit)  # 2^bit
            bit += 1
            n >>= 1
        
        # Step 2: Prefix products
        prefix = [1] * (len(powers) + 1)
        for i in range(len(powers)):
            prefix[i+1] = (prefix[i] * powers[i]) % MOD
        
        # Step 3: Answer queries using modular inverse
        ans = []
        for l, r in queries:
            total = prefix[r+1] * pow(prefix[l], MOD-2, MOD) % MOD
            ans.append(total)
        
        return ans
        
